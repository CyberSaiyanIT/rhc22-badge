#ifndef _DRAGON_H
#define _DRAGON_H

#include <stdint.h>
#include "esp_log.h"
#include "esp_mac.h"

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "freertos/semphr.h"
#include "common/storage.h"

#include "led.h"
#include "bt.h"
#include "wifi.h"
#include "httpd.h"
#include "sync.h"
#include "ui.h"

#define SETTINGS_FILE "/data/settings.json"
#define DEFAULT_FILE "/data/default.json"
#define SCHEDULE_FILE "/data/schedule.json"
#define TMP_SCHEDULE_FILE "/data/schedule.json.tmp"

#define BADGE_BUF_SIZE 20
#define BADGE_NAME_MAX_SIZE 28
#define SCHEDULE_BUFFER_LEN 10000

#define MAX_NEARBY_NODE 16
#define SIZEOF(a) sizeof(a)/sizeof(*a)

// These variables are autogenerated and compiled

extern const char* GIT_TAG;
extern const char* GIT_REV;
extern const char* GIT_BRANCH;


typedef struct {
    uint8_t mac[6];
    uint16_t short_mac;
    uint8_t device_id;
    char device_name[BADGE_BUF_SIZE];

    char web_login[BADGE_BUF_SIZE];
    char ap_ssid[BADGE_BUF_SIZE];
    char ap_password[BADGE_BUF_SIZE];
    char sta_ssid[BADGE_BUF_SIZE];
    char sta_password[BADGE_BUF_SIZE];

    char* schedule_buffer;
    bool (*update)(int id, char* data); 
    // bool (*update_schedule)();
} badge_obj_t;

typedef struct {
    char name[BADGE_NAME_MAX_SIZE];
    uint8_t id;
    short rssi;
    uint32_t last_found;
    bool active;
} ble_node_t;

enum enum_badge_event {
    EVENT_HOTSPOT_START, 
    EVENT_HOTSPOT_STOP, 
    EVENT_STA_START,
    EVENT_STA_STOP,
    EVENT_SYNC_START, 
    EVENT_SYNC_STOP
};

extern xQueueHandle wifi_queue;
extern ble_node_t ble_nodes[MAX_NEARBY_NODE];
extern badge_obj_t badge_obj;

void badge_init();
char* load_file_content(char* filename);
char* load_schedule_from_file();

uint8_t count_ble_nodes();
bool check_ble_set();

#endif // _DRAGON_H
