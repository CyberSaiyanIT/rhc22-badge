/**
 * @file lv_demo_widgets.c
 *
 */

/*********************
 *      INCLUDES
 *********************/
#include "../../lv_examples.h"
#include "lv_demo_widgets.h"
#include <stdio.h>
#include <stdlib.h>

#if LV_USE_DEMO_WIDGETS

static lv_style_t style_butt;

lv_obj_t *b[16] = {0}, *l[16] = {0};
lv_obj_t *scr4;

void radar_scan_task(lv_task_t *task)
{
    static int mode = 1;
    
    if (mode == 0) {
        for (int i = 0; i < 8; i++)
            lv_obj_fade_in(b[i], 1000, 0);
    } else {
        for (int i = 0; i < 8; i++)
            lv_obj_fade_out(b[i], 1000, 0);
    }
    
    mode = !mode;
}

enum SNAKE_DIR {
    SNAKE_DIR_BEGIN = 10,
    SNAKE_DIR_UP = SNAKE_DIR_BEGIN, 
    SNAKE_DIR_LEFT, 
    SNAKE_DIR_DOWN, 
    SNAKE_DIR_RIGHT,
    SNAKE_DIR_END = SNAKE_DIR_RIGHT,
};
const char snake_eyes[][4] = {"' '", ": ", ". .", " :"};
#define SNAKE_MAX_BODY       64
#define SNAKE_BODY_SIZE      20

struct _snake {
    lv_obj_t *body[SNAKE_MAX_BODY]; 
    lv_obj_t *eye;      // the 'eye' on snake to locate it direction.
    lv_obj_t *food;
    enum SNAKE_DIR dir;
    int size;
};
static struct _snake snake;

static void snake_add_body(lv_obj_t *parent)
{
    if (snake.size >= SNAKE_MAX_BODY)
        return;
    
    int index = snake.size++;
    snake.body[index] = lv_btn_create(parent, NULL);
    lv_btn_toggle(snake.body[index]);
    lv_obj_set_size(snake.body[index], SNAKE_BODY_SIZE, SNAKE_BODY_SIZE);
}

void snake_set_dir(enum SNAKE_DIR dir)
{
    if (dir < SNAKE_DIR_BEGIN)
        dir = SNAKE_DIR_END;
    if (dir > SNAKE_DIR_END)
        dir = SNAKE_DIR_BEGIN;
    snake.dir = dir;
    lv_label_set_text(snake.eye, snake_eyes[snake.dir - SNAKE_DIR_BEGIN]);
}

void snake_rotate_left()
{
    snake_set_dir(snake.dir - 1);
}

void snake_rotate_right()
{
    snake_set_dir(snake.dir + 1);
}

void snake_reset(lv_obj_t *parent)
{
    srand(lv_tick_get());
    
    for (int i = 0; i < snake.size; i++) {
        lv_obj_del(snake.body[i]);
        snake.body[i] = NULL;
    }
    snake.size = 0;
    if (snake.food) {
        lv_obj_del(snake.food);
        snake.food = NULL;
    }
    
    snake_add_body(parent); // head
    snake.eye = lv_label_create(snake.body[0], NULL);
    snake_set_dir(SNAKE_DIR_RIGHT);
    lv_obj_set_pos(snake.body[0], SNAKE_BODY_SIZE * 3, SNAKE_BODY_SIZE * 6);
    
    snake_add_body(parent);
    lv_obj_set_pos(snake.body[1], SNAKE_BODY_SIZE * 2, SNAKE_BODY_SIZE * 6);
    snake_add_body(parent);
    lv_obj_set_pos(snake.body[2], SNAKE_BODY_SIZE * 1, SNAKE_BODY_SIZE * 6);
}

void snake_run_task(lv_task_t *task)
{
    lv_obj_t *parent = scr4;
    lv_coord_t x = lv_obj_get_x(snake.body[0]);
    lv_coord_t y = lv_obj_get_y(snake.body[0]);
    
    switch (snake.dir) {
    case SNAKE_DIR_UP:
        y -= SNAKE_BODY_SIZE;
        break;
    case SNAKE_DIR_DOWN:
        y += SNAKE_BODY_SIZE;
        break;
    case SNAKE_DIR_LEFT:
        x -= SNAKE_BODY_SIZE;
        break;
    case SNAKE_DIR_RIGHT:
        x += SNAKE_BODY_SIZE;
        break;
    }
    
    // check if head hit any wall.
    if (x >= LV_HOR_RES || x < 0 || y >= LV_VER_RES || y < 0) {
        snake_reset(scr4);
        return;
    }
    // check if head hit any body.
    for (int i = 1; i < snake.size; i++) {
        if (x == lv_obj_get_x(snake.body[i]) 
         && y == lv_obj_get_y(snake.body[i])) {
            snake_reset(scr4);
            return;
        }
    }
    // check if head hit any food.
    if (snake.food) {
        if (x == lv_obj_get_x(snake.food) 
         && y == lv_obj_get_y(snake.food)) {
            lv_obj_del(snake.food);
            snake.food = NULL;    
            snake_add_body(parent);
        }
    }
    // if no food exists, we need to generate one in random place.
    else {
        snake.food = lv_btn_create(scr4, NULL);
        lv_obj_set_size(snake.food, SNAKE_BODY_SIZE, SNAKE_BODY_SIZE);
        lv_obj_set_pos(snake.food, 
            (rand() % LV_HOR_RES) / SNAKE_BODY_SIZE * SNAKE_BODY_SIZE,
            (rand() % LV_VER_RES) / SNAKE_BODY_SIZE * SNAKE_BODY_SIZE);
    }
    
    // now we can move the body.
    for (int i = snake.size - 1; i >= 1; i--) {
        lv_coord_t cx = lv_obj_get_x(snake.body[i - 1]);
        lv_coord_t cy = lv_obj_get_y(snake.body[i - 1]);
        lv_obj_set_pos(snake.body[i], cx, cy);
    }
    lv_obj_set_pos(snake.body[0], x, y); // head is last one.
}

void lv_demo_widgets(void)
{
//    lv_coord_t grid_w = LV_HOR_RES, grid_h = LV_VER_RES;
    
#ifdef xxxx
// PAGE1
    lv_obj_t * scr1 = lv_obj_create(NULL, NULL);
    LV_IMG_DECLARE(img_radar);
    lv_obj_t *img = lv_img_create(scr1, NULL);
    lv_img_set_src(img, &img_radar);
    lv_obj_align(img, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    
    // radar should show style_butt
    lv_style_init(&style_butt);
    
    for (int i = 0; i < sizeof(b) / sizeof(lv_obj_t *); i++) {
        b[i] = lv_btn_create(img, NULL);
        lv_obj_set_size(b[i], 20, 20);
        lv_obj_set_pos(b[i], i * 30, i * 30);
        lv_btn_toggle(b[i]);  // set to solid color.
        l[i] = lv_label_create(b[i], NULL);
        char index[2] = {(i % 7) + '0', 0};
        lv_label_set_text(l[i], index);
    }
    
    lv_task_create(radar_scan_task, 5000, LV_TASK_PRIO_LOW, NULL);
    lv_scr_load(scr1);

    
// PAGE2    
    lv_obj_t * scr2 = lv_obj_create(NULL, NULL);
    lv_obj_t *page1 = lv_page_create(scr2, NULL);
    lv_obj_set_size(page1, grid_w, grid_h);
    lv_coord_t table_w_max1 = lv_page_get_width_fit(page1);
    
    lv_obj_t * table1 = lv_table_create(page1, NULL);
    /*Clean the background style of the table because it is placed on a page*/
    lv_obj_clean_style_list(table1, LV_TABLE_PART_BG);
    lv_obj_set_drag_parent(table1, true);
    lv_table_set_col_cnt(table1, 2);
    
    lv_table_set_col_width(table1, 0, LV_MATH_MAX(30, 2 * table_w_max1  / 7 - 1));
    lv_table_set_col_width(table1, 1, LV_MATH_MAX(60, 5 * table_w_max1 / 7 - 1));

    lv_table_set_cell_value(table1, 0, 0, "DAY 1\n10:30\nTENT1\n(~8h)");
    lv_table_set_cell_value(table1, 1, 0, "DAY 2\n10:45\nTENT2\n(~3h)");
    lv_table_set_cell_value(table1, 2, 0, "DAY 3\n22:45\nPOOL\n(~1h)");

    lv_table_set_cell_value(table1, 0, 1, "Event opening by Cyber Saiyan");
    lv_table_set_cell_value(table1, 1, 1, "Oh! Auth: Implentatation ptfalls of OAuth 2.0 & the Auth Providers who have fell n it by Samit Answer");
    lv_table_set_cell_value(table1, 2, 1, "Event closing by Cyber Saiyan");
    
    //lv_scr_load(scr2);
    lv_scr_load_anim(scr2, LV_SCR_LOAD_ANIM_OVER_LEFT, 300, 5000, false);
    
// PAGE3
    lv_obj_t * scr3 = lv_obj_create(NULL, NULL);
    lv_obj_t *page2 = lv_page_create(scr3, NULL);
    lv_obj_set_size(page2, grid_w, grid_h);
    
    lv_coord_t table_w_max = lv_page_get_width_fit(page2);
    //lv_page_set_scroll_propagation(page, false);
    
    lv_obj_t * table2 = lv_table_create(page2, NULL);
    /*Clean the background style of the table because it is placed on a page*/
    lv_obj_clean_style_list(table2, LV_TABLE_PART_BG);
    lv_obj_set_drag_parent(table2, true);
    lv_table_set_col_cnt(table2, 3);
    
    lv_table_set_col_width(table2, 0, LV_MATH_MAX(60, 4 * table_w_max / 9 - 1));
    lv_table_set_col_width(table2, 1, LV_MATH_MAX(60, 3 * table_w_max / 9 - 1));
    lv_table_set_col_width(table2, 2, LV_MATH_MAX(60, 2 * table_w_max / 9 - 1));

    lv_table_set_cell_value(table2, 0, 0, "NAME");
    lv_table_set_cell_value(table2, 1, 0, "Saiyan-03BF");
    lv_table_set_cell_value(table2, 2, 0, "Saiyan-03BF");
    lv_table_set_cell_value(table2, 3, 0, "Saiyan-03BF");
    lv_table_set_cell_value(table2, 4, 0, "Saiyan-03BF");
    lv_table_set_cell_value(table2, 5, 0, "Saiyan-03BF");
    lv_table_set_cell_value(table2, 6, 0, "Saiyan-03BF");

    lv_table_set_cell_value(table2, 0, 1, "RSSI");    
    lv_table_set_cell_value(table2, 1, 1, "-40dBm");
    lv_table_set_cell_value(table2, 2, 1, "-45dBm");
    lv_table_set_cell_value(table2, 3, 1, "-55dBm");
    lv_table_set_cell_value(table2, 4, 1, "-78dBm");
    lv_table_set_cell_value(table2, 5, 1, "-21dBm");
    lv_table_set_cell_value(table2, 6, 1, "-27dBm");
    
    lv_table_set_cell_value(table2, 0, 2, "ID");    
    lv_table_set_cell_value(table2, 1, 2, "1");
    lv_table_set_cell_value(table2, 2, 2, "4");
    lv_table_set_cell_value(table2, 3, 2, "5");
    lv_table_set_cell_value(table2, 4, 2, "6");
    lv_table_set_cell_value(table2, 5, 2, "5");
    lv_table_set_cell_value(table2, 6, 2, "6");
    
    //lv_scr_load(scr3);
    lv_scr_load_anim(scr3, LV_SCR_LOAD_ANIM_OVER_LEFT, 300, 10000, false);
    
#endif
    
// PAGE 4 (snake)
    scr4 = lv_obj_create(NULL, NULL);
    
    snake_reset(scr4);
    
    lv_scr_load(scr4);
    
    lv_task_create(snake_run_task, 100, LV_TASK_PRIO_LOW, NULL);
}

#endif
